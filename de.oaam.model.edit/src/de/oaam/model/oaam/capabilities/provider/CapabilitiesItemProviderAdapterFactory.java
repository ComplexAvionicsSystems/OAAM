/**
 */
package de.oaam.model.oaam.capabilities.provider;

import de.oaam.model.oaam.capabilities.util.CapabilitiesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CapabilitiesItemProviderAdapterFactory extends CapabilitiesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CapabilitiesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.oaam.model.oaam.capabilities.TaskCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskCapabilityItemProvider taskCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.oaam.model.oaam.capabilities.TaskCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskCapabilityAdapter() {
		if (taskCapabilityItemProvider == null) {
			taskCapabilityItemProvider = new TaskCapabilityItemProvider(this);
		}

		return taskCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.oaam.model.oaam.capabilities.DeviceCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceCapabilityItemProvider deviceCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.oaam.model.oaam.capabilities.DeviceCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceCapabilityAdapter() {
		if (deviceCapabilityItemProvider == null) {
			deviceCapabilityItemProvider = new DeviceCapabilityItemProvider(this);
		}

		return deviceCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.oaam.model.oaam.capabilities.ConnectionCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionCapabilityItemProvider connectionCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.oaam.model.oaam.capabilities.ConnectionCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionCapabilityAdapter() {
		if (connectionCapabilityItemProvider == null) {
			connectionCapabilityItemProvider = new ConnectionCapabilityItemProvider(this);
		}

		return connectionCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.oaam.model.oaam.capabilities.SignalCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalCapabilityItemProvider signalCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.oaam.model.oaam.capabilities.SignalCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalCapabilityAdapter() {
		if (signalCapabilityItemProvider == null) {
			signalCapabilityItemProvider = new SignalCapabilityItemProvider(this);
		}

		return signalCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.oaam.model.oaam.capabilities.SubDeviceCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubDeviceCapabilityItemProvider subDeviceCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.oaam.model.oaam.capabilities.SubDeviceCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubDeviceCapabilityAdapter() {
		if (subDeviceCapabilityItemProvider == null) {
			subDeviceCapabilityItemProvider = new SubDeviceCapabilityItemProvider(this);
		}

		return subDeviceCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.oaam.model.oaam.capabilities.ResourceConsumption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceConsumptionItemProvider resourceConsumptionItemProvider;

	/**
	 * This creates an adapter for a {@link de.oaam.model.oaam.capabilities.ResourceConsumption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceConsumptionAdapter() {
		if (resourceConsumptionItemProvider == null) {
			resourceConsumptionItemProvider = new ResourceConsumptionItemProvider(this);
		}

		return resourceConsumptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.oaam.model.oaam.capabilities.Capabilities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilitiesItemProvider capabilitiesItemProvider;

	/**
	 * This creates an adapter for a {@link de.oaam.model.oaam.capabilities.Capabilities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilitiesAdapter() {
		if (capabilitiesItemProvider == null) {
			capabilitiesItemProvider = new CapabilitiesItemProvider(this);
		}

		return capabilitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.oaam.model.oaam.capabilities.Subcapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubcapabilityItemProvider subcapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.oaam.model.oaam.capabilities.Subcapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubcapabilityAdapter() {
		if (subcapabilityItemProvider == null) {
			subcapabilityItemProvider = new SubcapabilityItemProvider(this);
		}

		return subcapabilityItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (taskCapabilityItemProvider != null) taskCapabilityItemProvider.dispose();
		if (deviceCapabilityItemProvider != null) deviceCapabilityItemProvider.dispose();
		if (connectionCapabilityItemProvider != null) connectionCapabilityItemProvider.dispose();
		if (signalCapabilityItemProvider != null) signalCapabilityItemProvider.dispose();
		if (subDeviceCapabilityItemProvider != null) subDeviceCapabilityItemProvider.dispose();
		if (resourceConsumptionItemProvider != null) resourceConsumptionItemProvider.dispose();
		if (capabilitiesItemProvider != null) capabilitiesItemProvider.dispose();
		if (subcapabilityItemProvider != null) subcapabilityItemProvider.dispose();
	}

}
